@model IDemotivator.Demotivator
<script type="text/javascript" src="~/Scripts/jquery-1.10.2.min.js"></script>

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var newtag = "";
}
<link href="~/Content/canvas.css" rel="stylesheet">
<script src="~/Scripts/fabric.js"></script>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
   
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
       
        
        <div class="form-horizontal">
            <div class="col-md-3">
            <div class="form-group ">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Str1, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Str1, new { htmlAttributes = new { @class = "form-control", id = "str11" } })
                    @Html.ValidationMessageFor(model => model.Str1, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Str2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Str2, new { htmlAttributes = new { @class = "form-control", id = "str22" } })
                    @Html.ValidationMessageFor(model => model.Str2, "", new { @class = "text-danger" })
                </div>
            </div>
                </div>
            <div class="form-group">
                <form id="fileUpload" action="@Url.Action("AddImage")" method="POST" >
                    <input id="fileInput" type="file" class="btn btn-default" accept="image/x-png, image/gif, image/jpeg" />
                    <input type="button" value="Upload file" class="btn btn-success" id="btnFileUpload" />
                </form>
            </div>
           
            <div class="form-group">
                <p>Tags: </p> 
                <div>
                    <input type="text" id="newtag" name="newtag" readonly="readonly" class="form-control col-md-5" />
                </div>
                <div class="btn-group">
                    <input type="text" id="Tag" class="form-control col-md-2" data-autocomplete-source='@Url.Action("AutocompleteSearch", "Demotivators")' />

                    
                    <input type="button" value="AddTag" class="btn btn-default" id="AddTag" />
                </div>
            </div>
            
            <div class="btn-group" role="group" aria-label="...">
                <button type="button" class="btn btn-default active" id="Hpattern">Vertical</button>
                <button type="button" class="btn btn-default" id="Wpattern">Horizontal</button>
            </div>
            <div class="btn-group">
                <div >
                    <input type="submit" value="Create" class="btn btn-default" id="create"  disabled="disabled"/>
                </div>
            </div>
            @Html.EditorFor(model => model.Url_Img, new { htmlAttributes = new { @class = "form-control", id = "Url_Img", type = "hidden" } })
            @Html.EditorFor(model => model.Url_Img_Origin, new { htmlAttributes = new { @class = "form-control", id = "Url_Img_Origin", type = "hidden" } })
            @Html.EditorFor(model => model.JSON, new { htmlAttributes = new { @class = "form-control", id = "JSON", type = "hidden" } })

        </div>
        <div id="canvas-container">
            <canvas id="canvas"></canvas>
        </div>
}







<script type="text/javascript">

            $(function(){
                   document.getElementById('#dialog').dialog({
                    autoOpen: false,
                    width: 400,
                    modal: true,
                    resizable: false,
                    buttons: {
                        "Submit Form": function() {
                            document.testconfirmJQ.submit();
                        },
                        "Cancel": function() {
                            $(this).dialog("close");
                        }
                    }
                });

                $('form#testconfirmJQ').submit(function(){
                    $("p#dialog-email").html($("input#emailJQ").val());
                    $('#dialog').dialog('open');
                    return false;
                });

                //Thickbox

                $('form#testconfirmTB').submit(function(){
                    $("p#TB-email").html($("input#emailTB").val());
                    tb_show('Verify Form Thickbox Style','TB_inline?height=155&amp;width=300&amp;inlineId=TBcontent');
                    return false;
                });

                $('input#TBcancel').click(function(){
                    tb_remove();
                });

                $('input#TBsubmit').click(function(){
                    document.testconfirmTB.submit();
                });


            });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    $(function () {
        $("[data-autocomplete-source]").each(function () {
            var target = $(this);
            target.autocomplete({ source: target.attr("data-autocomplete-source") });
        });
    });
     $("#AddTag").click(function() {
         document.getElementById("newtag").value += document.getElementById("Tag").value + " ";
         document.getElementById("Tag").value = "";
    });
</script>
}
<script src="~/Scripts/DemoCreate.js"></script>
